<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"><channel><title>Ben Raz Blog</title><link>https://benraz.dev/blog</link><description>My beautiful blog, delivered to you with next-generation RSS technology</description><pubDate>Tue, 19 Aug 2025 18:55:37 +0000</pubDate><item><title>An Honest Review of Go</title><link>https://benraz.dev/blog/golang_review.html</link><description><div data-box="note">
<p>NOTE:</p>
<p>I have written a few small projects in Go, so don’t assume what I am
writing is expert opinion on Go. These are just my first thoughts from
using the language.</p>
</div>
<p>For the past few months, I have been writing Go. I am now considering
returning to Rust, but I first want to write what I <a
href="#like">do</a> and <a href="#hate">don’t</a> like about Go.</p>
<h2 id="like">Things I like</h2>
<h3 id="concurrency">Concurrency</h3>
<p>Unlike most other languages, concurrency is not an afterthought in
Go. Channels and Goroutines are built right into the language as first
class features and are mostly a joy to work with in my experience. Go
manages to avoid the famous problem of <a
href="https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/">colored
functions</a> that plague a lot of other languages’ concurrency models.
Additionally, Channels and <code>select</code> statements are in general
really nice to use. It’s really hard to get concurrency right and the
fact that Go has mostly Gotten concurrency right is very impressive.</p>
<h3 id="type-system">Type System</h3>
<p>Go’s type system is intentionally very simple and does not allow for
complex inheritance trees. While Go does have struct embedding:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">// all methods of Animal are now implemented on Dog</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Dog <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    Animal </span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It is different from single inheritance because you can embed
multiple structs and struct embedding is fundamentally syntactic sugar.
Instead of writing this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Animal <span class="kw">struct</span> <span class="op">{</span> <span class="op">...</span> <span class="op">}</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> <span class="op">(</span>a Animal<span class="op">)</span> DoSomething<span class="op">()</span> <span class="op">{</span> <span class="op">...</span> <span class="op">}</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Dog <span class="kw">struct</span> <span class="op">{</span> Animal Animal <span class="op">}</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    Dog<span class="op">{}.</span>Animal<span class="op">.</span>DoSomething<span class="op">()</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>You write this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Animal <span class="kw">struct</span> <span class="op">{</span> <span class="op">...</span> <span class="op">}</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> <span class="op">(</span>a Animal<span class="op">)</span> DoSomething<span class="op">()</span> <span class="op">{</span> <span class="op">...</span> <span class="op">}</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Dog <span class="kw">struct</span> <span class="op">{</span> Animal <span class="op">}</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    Dog<span class="op">{}.</span>DoSomething<span class="op">()</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>While <code>Dog</code> can override <code>DoSomething</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> <span class="op">(</span>d Dog<span class="op">)</span> DoSomething<span class="op">()</span> <span class="op">{</span> <span class="op">...</span> <span class="op">}</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> main<span class="op">(</span> </span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    Dog<span class="op">{}.</span>DoSomething<span class="op">()</span> </span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span></code></pre></div>
<p>The original implementation still exists:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">// both work</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>Dog<span class="op">{}.</span>DoSomething<span class="op">()</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>Dog<span class="op">{}.</span>Animal<span class="op">.</span>DoSomething<span class="op">()</span> </span></code></pre></div>
<div data-box="note">
<p>NOTE:</p>
<p>Struct embedding also includes fields not just methods</p>
</div>
<p>Additionally, in Go a struct does not have to explicitly fulfill an
interface for it to apply. This is different from most other languages,
where interfaces must be implemented explicitly for them to apply. This
means that the empty interface <code>interface{}</code> or
<code>any</code> can be used to effectively introduce dynamic typing,
where types can be switched on with for example a type switch statement
at runtime. This makes things like <code>Printf</code> and html and text
templates way simpler to understand, and, most importantly, possible to
write without using macros like C and Rust.</p>
<h3 id="syntax">Syntax</h3>
<div data-box="warning">
<p>WARNING:</p>
<p>While the rest of this post can at least pretend to be objective,
this is just raw unfiltered opinion.</p>
</div>
<p>I like Go’s condensed syntax when it comes to ergonomics. It’s way
simpler to write type annotations without the colon or other characters
and it saves typing time.</p>
<p>I also like using uppercase and lowercase letters for visibility:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">// only accessible to the package</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> hello <span class="kw">struct</span><span class="op">{</span> <span class="op">...</span> <span class="op">}</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="co">// public</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> World <span class="kw">interface</span> <span class="op">{</span> <span class="op">...</span> <span class="op">}</span></span></code></pre></div>
<p>It just makes sense.</p>
<p>Also, I <strong>hate</strong> having to write <code>pub</code> all
the time in Rust.</p>
<h2 id="hate">Things I Don’t Like</h2>
<h3 id="enums1">Enums<a href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"><sup>1</sup></a></h3>
<div data-box="note">
<p>NOTE:</p>
<p>Yes, I know that this is a horse that has been already beaten to
death, but it’s really annoying so I have to contribute my own beating
to make sure this horse is really dead.</p>
</div>
<p>One of my least favorite things in Go is the lack of any enum type.
Sometimes you just want to have an enum and Go makes it a pain to do.
The most commonly accepted “solution” to this problem is to just make a
bunch of constants which are part of one type:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> State <span class="dt">int</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> <span class="op">(</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    Off State <span class="op">=</span> <span class="ot">iota</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    On</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    Error</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span></code></pre></div>
<p>This “solution” is to enums what a piece of tape is to a collapsed
bridge. Not only is this syntax annoying and decoupled, it doesn’t even
accomplish it’s primary Goal. There is no guarantee that every value of
<code>State</code> will be either <code>On</code>, <code>Off</code>, or
<code>Error</code>. So unless you exhaustively check every value of
<code>State</code> in every switch statement in every function in your
program, you have no guarantee of anything. A consumer of your program
could just pass in a value of <code>State(500)</code> and it’s anyone’s
guess how the program will mess up. Any sane language would have some
sort of syntactic sugar for constant groups to ensure that it’s a closed
set but Go just decides to leave that work to the programmer.</p>
<p>To make things worse, Go has no idea that that you want
exhaustiveness in switch statements either.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">// this code compiles without warnings!</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> st State</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="cf">switch</span> st <span class="op">{</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> On<span class="op">:</span> <span class="op">...</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> Off<span class="op">:</span> <span class="op">...</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>While you could just trust the consumer of your API not to do
something stupid like pass in <code>State(500)</code> and maybe use
linters to ensure exhaustivity, this is an astonishingly bad solution
forced upon the developer by a language that prides itself on being
simple and elegant.</p>
<h3 id="immutability">Immutability</h3>
<p>Go has two types of variables: constants and mutable variables,
declared like so:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> a <span class="op">=</span> <span class="dv">45</span> <span class="op">+</span> <span class="dv">77</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> b <span class="op">=</span> <span class="dv">22</span></span></code></pre></div>
<p>Here is the problem: variables declared with <code>const</code> need
to be <em>compile time constants</em>. All of these examples involve
assigning to a constant a value <em>known at compile time</em> but none
of them will work:</p>
<div class="sourceCode" id="cb10"><pre
class="sourceCode go"><code class="sourceCode go"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> A <span class="kw">struct</span><span class="op">{</span> val <span class="dt">int</span> <span class="op">}</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> a <span class="op">=</span> A<span class="op">{</span><span class="dv">3</span><span class="op">}</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> B<span class="op">()</span> <span class="dt">int</span> <span class="op">{</span> <span class="cf">return</span> <span class="dv">3</span> <span class="op">}</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> b <span class="op">=</span> B<span class="op">()</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> hash <span class="op">=</span> <span class="kw">map</span><span class="op">[</span><span class="dt">string</span><span class="op">]</span><span class="dt">int</span> <span class="op">{</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;HELLO&quot;</span><span class="op">:</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;WORLD&quot;</span><span class="op">:</span> <span class="dv">2</span><span class="op">,</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>What is the alternative? Use <code>var</code> of course:</p>
<div class="sourceCode" id="cb11"><pre
class="sourceCode go"><code class="sourceCode go"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> a <span class="op">=</span> A<span class="op">{</span><span class="dv">3</span><span class="op">}</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> b <span class="op">=</span> b<span class="op">()</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> hash <span class="op">=</span> <span class="kw">map</span><span class="op">[</span><span class="dt">string</span><span class="op">]</span><span class="dt">int</span> <span class="op">{</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;HELLO&quot;</span><span class="op">:</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;WORLD&quot;</span><span class="op">:</span> <span class="dv">2</span><span class="op">,</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This is an absolutely terrible solution especially if your API will
be used by people and these are symbols exported by your package. Anyone
can change these variables and break your package. The “solution” to
this problem is to use a function:</p>
<div class="sourceCode" id="cb12"><pre
class="sourceCode go"><code class="sourceCode go"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> _data <span class="op">=</span> <span class="kw">map</span><span class="op">[</span><span class="dt">string</span><span class="op">]</span><span class="dt">int</span> <span class="op">{</span> <span class="op">...</span> <span class="op">}</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> Data<span class="op">()</span> <span class="kw">map</span><span class="op">[</span><span class="dt">string</span><span class="op">]</span><span class="dt">int</span> <span class="op">{</span> <span class="cf">return</span> _data <span class="op">}</span></span></code></pre></div>
<p>This works but it sucks.</p>
<h3 id="errors">Errors</h3>
<p>In Go, idiomatic error management involves using the
<code>error</code> type. For example, a safe division function could be
implemented as so:</p>
<div class="sourceCode" id="cb13"><pre
class="sourceCode go"><code class="sourceCode go"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> safe_divide<span class="op">(</span>a<span class="op">,</span>b <span class="dt">int</span><span class="op">)</span> <span class="op">(</span>float<span class="op">,</span> <span class="dt">error</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> b <span class="op">==</span> <span class="dv">0</span> <span class="op">{</span> </span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="fl">0.0</span><span class="op">,</span> fmt<span class="op">.</span>Errorf<span class="op">(</span><span class="st">&quot;divide by zero&quot;</span><span class="op">)</span> </span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a<span class="op">/</span>b<span class="op">,</span> <span class="ot">nil</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This value can be consumed as follows:</p>
<div class="sourceCode" id="cb14"><pre
class="sourceCode go"><code class="sourceCode go"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>res<span class="op">,</span> err <span class="op">:=</span> safe_divide<span class="op">(</span><span class="dv">4</span><span class="op">,</span><span class="dv">2</span><span class="op">)</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> err <span class="op">!=</span> <span class="ot">nil</span> <span class="op">{</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    log<span class="op">.</span>Fatal<span class="op">(</span>err<span class="op">)</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>doSomethingWith<span class="op">(</span>res<span class="op">)</span></span></code></pre></div>
<p>It’s become something of a meme to bemoan the supposed difficulty of
writing <code>if err != nil</code>. I actually won’t make that point
because I think it is a very surface level point that has been talked
about to death and I don’t think the ‘verbosity’ of this code snippet is
such an issue.</p>
<p>I have two principal problems with this approach, one of them about
the “tuple” being used as a return type and another about the
<code>error</code> type itself.</p>
<h4 id="tuples-dont-exist">Tuples don’t exist</h4>
<p>This type, <code>(T, err)</code> is not actually a real type. Go’s
type system does not include tuples. This expression is something that
can only be handled by immediate destructuring.</p>
<p>For example, this (albeit contrived) snippet won’t work:</p>
<div class="sourceCode" id="cb15"><pre
class="sourceCode go"><code class="sourceCode go"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> doIfErrNil<span class="op">[</span>T<span class="op">](</span>val <span class="op">(</span>T<span class="op">,</span> <span class="dt">error</span><span class="op">),</span> f <span class="kw">func</span><span class="op">(</span>T<span class="op">))</span> <span class="op">{</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    v<span class="op">,</span> err <span class="op">:=</span> val</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> err <span class="op">!=</span> <span class="ot">nil</span> <span class="op">{</span> <span class="cf">return</span> <span class="op">}</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    f<span class="op">(</span>v<span class="op">)</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This restriction prevents chaining, which is unidiomatic anyway (and
maybe for good reason) or doing anything with (T, error) values</p>
<h4 id="the-error-type-sucks">The <code>error</code> type sucks</h4>
<p>Here is the full definition of the type <code>error</code>:</p>
<div class="sourceCode" id="cb16"><pre
class="sourceCode go"><code class="sourceCode go"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">error</span> <span class="kw">interface</span> <span class="op">{</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    Error<span class="op">()</span> <span class="dt">string</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>So if I am writing a library that runs some programs I can create my
own type that implements <code>error</code>:</p>
<div class="sourceCode" id="cb17"><pre
class="sourceCode go"><code class="sourceCode go"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> progError <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>    prog <span class="dt">string</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>    code <span class="dt">int</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>    reason <span class="dt">string</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> <span class="op">(</span>e progError<span class="op">)</span> Error<span class="op">()</span> <span class="dt">string</span> <span class="op">{</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> fmt<span class="op">.</span>Sprintf<span class="op">(</span><span class="st">&quot;%q returned code %d: %q&quot;</span><span class="op">,</span> e<span class="op">.</span>prog<span class="op">,</span> e<span class="op">.</span>code<span class="op">,</span> e<span class="op">.</span>reason<span class="op">)</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>In Go, the idiomatic thing to do is to hide <code>progError</code>
behind the return value <code>error</code>. In that case, the
information we have in the struct is left behind. The user now has an
interface value <code>error</code> that the only thing they can do is
access the string representation of. How is this error useful to the
people writing the program? Sure, they can print it out, but wouldn’t
the programmer want to do different things depending on what type of
error is returned? The only resort the consumer of this library has is
to parse the string value of this error for useful information. This is
a <em>terrible</em> strategy because nothing is stopping the library
authors from changing the string representation, something which is
totally at their discretion in my opinion.</p>
<p>The worst part is that this is not even a hypothetical. It in fact
happened to me when writing code that used <code>os.Stat</code> to get
file information<a href="#fn2" class="footnote-ref" id="fnref2"
role="doc-noteref"><sup>2</sup></a>:</p>
<div class="sourceCode" id="cb18"><pre
class="sourceCode go"><code class="sourceCode go"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> rootInfo<span class="op">(</span>root<span class="op">,</span> path <span class="dt">string</span><span class="op">)</span> <span class="op">(</span>has <span class="dt">bool</span><span class="op">,</span> isDir <span class="dt">bool</span><span class="op">,</span> err <span class="dt">error</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>    path <span class="op">=</span> pathpkg<span class="op">.</span>Clean<span class="op">(</span>path<span class="op">)</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>    info<span class="op">,</span> err <span class="op">:=</span> os<span class="op">.</span>Stat<span class="op">(</span>root <span class="op">+</span> <span class="st">&quot;/&quot;</span> <span class="op">+</span> path<span class="op">)</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> errors<span class="op">.</span>Is<span class="op">(</span>err<span class="op">,</span> os<span class="op">.</span>ErrNotExist<span class="op">)</span> <span class="op">{</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="ot">false</span><span class="op">,</span> <span class="ot">false</span><span class="op">,</span> <span class="ot">nil</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> err <span class="op">!=</span> <span class="ot">nil</span> <span class="op">&amp;&amp;</span> strings<span class="op">.</span>HasSuffix<span class="op">(</span>err<span class="op">.</span>Error<span class="op">(),</span> <span class="st">&quot;not a directory&quot;</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="co">//                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a><span class="co">//                   Manually checking if the error is a certain type of error</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="ot">false</span><span class="op">,</span> <span class="ot">false</span><span class="op">,</span> <span class="ot">nil</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> err <span class="op">!=</span> <span class="ot">nil</span> <span class="op">{</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="ot">false</span><span class="op">,</span> <span class="ot">false</span><span class="op">,</span> err</span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="ot">true</span><span class="op">,</span> info<span class="op">.</span>IsDir<span class="op">(),</span> <span class="ot">nil</span></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It’s true that this code sucks and that there was probably a better
alternative. It’s probably even true that the “not a directory” message
is almost 100% not going to change in the future. However, it’s still a
problem and a problem that stems from one thing:</p>
<p><strong>In Go, errors are values. They just aren’t particularly
<em>useful</em> values.</strong></p>
<p>Contrast this to how Rust handles errors.</p>
<p>In Rust, errors are also values but they are <em>useful</em> values.
If I do an I/O operation in Rust, I am likely to get a
<code>std::io::Result&lt;T&gt;</code>, which is just a
<code>Result&lt;T, std::io::Error&gt;</code>. This
<code>std::io::Error</code>’s type can be easily accessed with the
<code>kind()</code> method of <code>std::io::error</code> which lets you
easily understand what kind of error you are dealing with.</p>
<p>Why does Rust have more useful errors than Go?</p>
<ul>
<li>Rust has enums and sum types</li>
<li>Rust doesn’t have the pervasive idiom of hiding your error behind an
interface that reveals little about the error</li>
</ul>
<div data-box="extra">
<p>EXTRA:</p>
<p>For more, check out the <a
href="https://doc.rust-lang.org/std/io/struct.Error.html#method.kind"><code>std::io</code>
documentation</a></p>
</div>
<section id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>By <em>enum</em>, I mean a closed set of constants given
a name as a type. Enums are often confused with sum types, which is a
closed set of <em>types</em> given a name. However one could argue this
distinction doesn’t matter because I think the absence of <em>both</em>
harms Go as a language.<a href="#fnref1" class="footnote-back"
role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>You can see this code at <a
href="https://github.com/BenRaz123/gonotes/blob/main/server/server.go#L26">benraz123/server</a>
<a href="https://archive.ph/2Lsr3">(archive)</a>, specifically at <a
href="https://github.com/BenRaz123/gonotes/commit/0a5e27cb470436a4029d504bbc595db6d17d0056">this
commit</a><a href="#fnref2" class="footnote-back"
role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</description><pubDate>Tue, 19 Aug 2025 18:53:00 +0000</pubdate></item> <item><title>Predicting Trump's Policy on NATO & Ukraine</title><link>https://benraz.dev/blog/trump_ukraine_nato.html</link><description><div data-box="disclaimer">
<p>DISCLAIMER:</p>
<p>This will be as close as possible to an objective analysis of
geopolitics. My goal is not to make a case for any particular politician
or policy or to glorify or demonize any particular country or group of
countries. We often fall into the trap of anthropomorphizing countries.
Countries are not people. They make highly calculated and rational
foreign policy decisions, whether moral or otherwise. Their very
continued existence depends on this.</p>
</div>
<p>A spectre is haunting Europe. Specifically the spectre of a second
Trump administration.</p>
<p>The 2024 election has been one that observers in Europe have not been
looking forward to. The reason for this anxiety is the uncertainty that
existed coming into the election. Unlike the 2020 election in which most
people expected Biden to defeat Trump, the 2024 election has been far
more tumultuous and uncertain. Going into election day, most polls left
the race up to a coin flip. For the European security community, the
stakes couldn’t be higher. Kamala Harris essentially ran on a
continuation of Biden’s strong support for NATO and Ukraine. Trump, on
the other hand ran under an “America First” platform based on weaker
support of Ukraine and NATO.</p>
<p>This sense of dread turned into panic as the election results started
coming in. Trump was decisively elected president, defying most polls
that predicted a close race. In a record landslide, Trump won over every
single swing state and managed to be the first republican in 20 years to
win the popular vote. This overwhelming electoral mandate now gives
Trump room to enact his most extreme policies. He will no doubt
additionally be helped by the new republican trifecta in congress and
domination of the supreme court.</p>
<p>However, have European observers overreacted? How much of Trump’s
populist rhetoric will really translate into his policy?</p>
<h2 id="the-general-outlook">The General Outlook</h2>
<p>It’s useful not to sugarcoat this - Trump’s victory is not good for
you if you are a fan of NATO or American protection of Ukraine and
Europe. The most optimistic best case scenario is that Trump will be a
net neutral for these issues, unceremoniously continuing Biden’s
policies. In the worst case, America will completely pull back from the
world, irreversibly damaging American power and influence on the world
stage and paving the road to an even more difficult war for Ukraine.
Europe will be in severe trouble if Donald Trump pulls out of NATO and a
continent-wide reckoning over security will have to happen.</p>
<p>However, neither of these extreme scenarios are likely to happen.
Whatever does happen still likely won’t be what most European leaders
wanted.</p>
<h2 id="ending-the-war-in-ukraine">(Ending) The War in Ukraine</h2>
<p>When it comes to the war in Ukraine, the Ukrainians define victory as
moving the line of control all the way back to internationally
recognized Ukraine. In other words, no inch of Ukraine would be occupied
by Russia. To put it simply, this is an unachievable goal. Even with
billions of dollars of Western aid, the best Ukraine can do is to stem
Russian progress and to freeze the lines of fighting to the best of its
ability. Additionally, the future of this war does not look bright for
Ukraine. Russia has the luxury of a vastly bigger population, which
means that Ukraine will certainly loose the longer the war goes on as it
runs out of military-aged men. Even the Russian economy is doing fine
despite historic sanctions <a href="#fn1" class="footnote-ref"
id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p>
<p>Anyone who says that Ukraine will win this war is either engaged in
wishful thinking or is lying to themselves. As it turns out, the world
is not like a Disney movie. Aggressors are not always valiantly defeated
by the little guy. Little guys loose because they are little and
aggressors win most of the time because they would not have become
aggressors if their loss was guaranteed.</p>
<p>Now the goal of the current US involvement is to punish Russia for
violating international norms by elongating the damaging effect of
economic sanctions as well as to diminish the Russian military.
According to an analysis of data from a number of sources<a href="#fn2"
class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>,
just four days of fighting the war in Ukraine cost the Russian military
about 7 billion dollars. The immense cost will certainly cause damage
the longer the war goes on.</p>
<p>Arguably, this goal has already been achieved. Almost all western
countries have enacted strict and punishing sanctions on the Russian
economy. Additionally, the war in Ukraine has revitalized NATO, with
Finland and Sweden joining in 2023 and 2024 respectively<a href="#fn3"
class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>.
(Montenegro and Macedonia also since 2014<a href="#fn4"
class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>)
Additionally, NATO spending is up<a href="#fn5" class="footnote-ref"
id="fnref5" role="doc-noteref"><sup>5</sup></a>.</p>
<p>To summarize, since invading Ukraine, the Russian sphere of influence
has shrunken tremendously at a comparatively negligible western
cost.</p>
<p>Because the conflict has been relatively contained (so far), not a
single soldier from any western country (excluding Russia, Ukraine, and
a handful of Western volunteers) has been killed in this effort. Even
the costs of American support for Ukraine have been modest. Most
military equipment sent to Ukraine is considerably old, outdated
technology. Getting rid of them may have even saved a moderate amount of
money as scrapping them would have been more expensive. Additionally,
this process frees up space for more modern and advanced weapons.</p>
<h3 id="the-new-strategy">The New Strategy</h3>
<p>One of the hallmarks of Donald Trump is his trademark lack of
specificity. What we do know from Trump is that he wants to end the war
in Ukraine. While it may seem foolish to end a war that has almost
unambiguously benefited the West, there are costs for the United States
of the war in Ukraine continuing absent of course the tremendous human
cost. These reasons can be summarized as follows:</p>
<ol type="1">
<li>We really should be focusing on China</li>
<li>Russia’s isolation pulls the “Anti-Western” axis (nations like
Russia, China, Iran, North Korea, etc) closer together</li>
</ol>
<p>When looking at threats to American hegemony, most strategists
consider China the chief threat instead of Russia. China’s power is
growing while Russia has been in decline for the better part of half a
century and this decline may worsen. Simply speaking, Russia is not that
important. And all of the billions sent to Ukraine could be billions
sent to secure, for example the south China sea.</p>
<p>Another problem is how the sanctions have effected relations between
the “Anti-Western” axis. Russia and North Korea have never had closer
relations in a while. Why? Because both of these nations have been
extensively sanctioned by the West. Russia needs North Korea and North
Korea needs Russia. Why has Russia been so close with Iran as of late?
Same reason. The effect that sanctions on Russia have had so far have
been negative in terms of pushing America’s enemies closer together.</p>
<p>So these are all good reasons why Trump would try to end the War in
Ukraine, other than, of course, the massive human cost. Is Trump
motivated by these reasons? Or is he motivated by the money/dirt Putin
has on him? Is he just an idiot who doesn’t think through his takes in a
scholarly manner? I don’t know the answer to these questions and they
largely don’t matter for this discussion. The main point is how will the
War in Ukraine be ended by the US.</p>
<p>So how will Trump end the war in Ukraine? Nobody knows and Trump
certainly hasn’t said so yet, but a report published by the Trump-allied
America First Policy Institute (AFPI)’s Center for American Security<a
href="#fn6" class="footnote-ref" id="fnref6"
role="doc-noteref"><sup>6</sup></a> hints at some specifics. The methods
for getting a deal expressed in the AFPI report are as follows, where
carrots are rewards for compliance and sticks are punishments for
noncompliance:</p>
<div data-box="carrots/sticks">
<p>CARROTS/STICKS:</p>
<ul>
<li>Russia <span class="emoji" data-emoji="ru">🇷🇺</span>
<ul>
<li>Carrots
<ul>
<li>A moratorium on Ukraine joining NATO for a decade or two</li>
<li>Limited Sanctions Relief</li>
</ul></li>
<li>Sticks
<ul>
<li>Continual of Sanctions</li>
<li>Increase of Aid to Ukraine</li>
</ul></li>
</ul></li>
<li>Ukraine <span class="emoji" data-emoji="ukraine">🇺🇦</span>
<ul>
<li>Carrots
<ul>
<li>Continued US military aid after a preliminary deal until a final
deal is reached</li>
<li>Levies on Russian oil will be used to rebuild Ukraine</li>
</ul></li>
<li>Sticks
<ul>
<li>Discontinuing aid</li>
</ul></li>
</ul></li>
</ul>
</div>
<p>Another component of the deal is that it is designed to be a
short-term solution to stop the fighting while kicking the can down the
road. The main priorities of the deal are in fact peace, but Ukraine
would of course consider it an unjust peace as the deal does not return
any occupied land to Ukraine, at least not immediately. The deal
suggests that these issues can be worked out diplomatically and not
through force, “with the understanding that this would require a future
diplomatic breakthrough which probably will not occur before Putin
leaves office,” (16).</p>
<p>Something to know about this deal is that the Ukrainians certainly
will not be happy with it. They will see the deal as codifying Russia’s
victory and waiting until a miraculous negotiation breakthrough that
will never happen. And they are right to think that. Any possible
outcome of this war will be a Russian victory in some way. The only
relevant question is how much of a victory and how many Russians and
Ukrainians die before it is realized. Additionally, whoever Putin’s
successor is, it is unlikely that he (or she) will be willing to give
back Ukraine Russian-occupied territories out of the good of his
heart.</p>
<p>It is worth noting that this plan to strike a deal with Russia and
Ukraine is way better than what I feared Trump would do: unilaterally
end all aid without any conditions.</p>
<h2 id="nato">NATO</h2>
<p>Trump’s rhetoric on NATO does indeed sound threatening. Trump seems
to think of NATO as a protection racket where you pay for American
defense guarantees. And in Trump’s eyes, Europeans are not paying.</p>
<p>The worst case scenario would be Trump pulling the US out of NATO.
This would harm America geopolitically for generations and would pull
Europe away from the American sphere. It would essentially mean American
conceding it’s superpower status and focusing inwards. It also isn’t
going to happen. Why I am I so confident this won’t happen? The first
reasons is of course that Trump didn’t leave NATO in his first term. But
if you look at the people he has appointed to foreign policy positions,
they are all hawks in terms of foreign policy. For example, Trump choose
Marco Rubio as his secretary of state. This is definetely strange if you
think Trump wants to leave NATO or even be especially hard on NATO.
Marco Rubio was one of the few republican congressmen to introduce a
bill in 2019 banning Trump from withdrawing from NATO<a href="#fn7"
class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>.
Clearly Rubio is not some sort of Russia dove or isolationist.</p>
<p>What, then, explains the difference between Trump’s isolationist
rhetoric and his hawkish actions? Was his rhetoric just BS to excite the
base? Did Trump get captured last-minute by the deep state? Paid off by
the military industrial complex? Was he targeted by a shadowy cabal of
Jewish foreign policy hawks? Or maybe, just maybe, all of this is part
of Trump’s plan. What if Trump’s goal was not to leave NATO but to
strengthen it? When looking at the situation through these lens, Trump’s
erratic actions seem to fit into a coherent plan. Everybody agrees that
NATO is stronger when all the nations in it meet their 2% spending
minimum. And most NATO members, frightened by the prospect of a Trump
presidency have increased their spending in response. What if this is
exactly what Trump wanted to happen?</p>
<div data-box="note">
<p>NOTE:</p>
<p>Now, none of this is to endorse Trump or his foreign policy. I do not
mean to suggest that Trump’s policies are the silver bullet to all the
foreign policy issues we face. My intent is just to take a critical look
at his policies to determine what they actually are.</p>
</div>
<h2 id="conclusion">Conclusion</h2>
<p>I hope you guys liked this foreign policy-based post. I plan on
making programming content on this blog but I just felt like I had to
write about this. Anyways, thanks for reading and I would love to see
your comments.</p>
<h2 id="updates">Updates</h2>
<ol type="1">
<li>Changed the name from “What is Trump’s Policy on NATO &amp; Ukraine”
to “Predicting Trump’s Policy on NATO &amp; Ukraine”
<em>(2024-12-26)</em></li>
</ol>
<section id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>well not <em>fine</em>, but better than expected<a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p><a
href="https://www.calameo.com/read/005151365f835f7261566"
class="uri">https://www.calameo.com/read/005151365f835f7261566</a><a
href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p><a
href="https://www.nato.int/cps/en/natohq/topics_52044.htm"
class="uri">https://www.nato.int/cps/en/natohq/topics_52044.htm</a><a
href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p><a
href="https://www.nato.int/cps/en/natohq/topics_52044.htm"
class="uri">https://www.nato.int/cps/en/natohq/topics_52044.htm</a><a
href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p><a
href="https://www.defense.gov/News/News-Stories/Article/Article/3679027/nato-military-spending-has-steadily-increased/"
class="uri">https://www.defense.gov/News/News-Stories/Article/Article/3679027/nato-military-spending-has-steadily-increased/</a><a
href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p><a
href="https://americafirstpolicy.com/assets/uploads/files/America_First%2C_Russia%2C___Ukraine_.pdf"
class="uri">https://americafirstpolicy.com/assets/uploads/files/America_First%2C_Russia%2C___Ukraine_.pdf</a><a
href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p><a
href="https://thehill.com/policy/defense/425938-bipartisan-senators-reintroduce-bill-to-prevent-trump-from-withdrawing-from/"
class="uri">https://thehill.com/policy/defense/425938-bipartisan-senators-reintroduce-bill-to-prevent-trump-from-withdrawing-from/</a><a
href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</description><pubDate>Sat, 30 Nov 2024 12:04:00 +0000</pubdate></item> <item><title>Note Boxes!</title><link>https://benraz.dev/blog/note_boxes.html</link><description><div data-box="note">
<p>NOTE:</p>
<p>What I am referring to as <em>note boxes</em> are also referred to
more generically as call-out boxes or admonitions boxes. I have not seen
it referred to as note boxes before so I have taken it upon myself to
contribute to linguistic diversity<a href="#fn1" class="footnote-ref"
id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p>
</div>
<p>I decided to write a shorter and more lighthearted blog post after my
heaver and significantly darker blog post on foreign affairs (<a
href="/blog/trump_ukraine_nato.html">read it here</a>), my topic, as the
title suggests, is on note boxes, but not just any note boxes, the ones
on my website!</p>
<h2 id="demo">Demo</h2>
<p>The way that my blog works is that posts are written in <a
href="https://en.wikipedia.org/wiki/Markdown">markdown</a> and processed
with <a href="https://pandoc.org/">pandoc</a> into <a
href="https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a>. (For
more information on this process read <a
href="/blog/website_process.html">this</a> blog post I wrote.</p>
<p>Anyways, if I write markdown along the lines of this:</p>
<div class="sourceCode" id="cb1"><pre
class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>::: note</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>Hello World</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>:::</span></code></pre></div>
<p>It will evaluate to the following HTML:</p>
<div class="sourceCode" id="cb2"><pre
class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">div</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;note&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">p</span><span class="dt">&gt;</span>NOTE:<span class="dt">&lt;/</span><span class="kw">p</span><span class="dt">&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">p</span><span class="dt">&gt;</span>Hello World<span class="dt">&lt;/</span><span class="kw">p</span><span class="dt">&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">div</span><span class="dt">&gt;</span></span></code></pre></div>
<p>Which will render like this:</p>
<div data-box="note">
<p>NOTE:</p>
<p>Hello World</p>
</div>
<h2 id="the-markdown-side-of-things">The Markdown Side of Things</h2>
<p>Now, <code>pandoc</code> interprets markdown in the format as
this:</p>
<pre><code>::: &lt;names&gt;
&lt;content&gt;
:::</code></pre>
<p>To mean HTML looking like this:</p>
<div class="sourceCode" id="cb4"><pre
class="sourceCode html"><code class="sourceCode html"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">div</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;</span><span class="er">&lt;</span><span class="st">names&gt;&quot;</span><span class="dt">&gt;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">content</span><span class="dt">&gt;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">div</span><span class="dt">&gt;</span></span></code></pre></div>
<p>The strengths of writing markdown like this is that it is super easy
to do and you don’t repeat yourself at all (follows DRY). In other
words, this type of markdown is very elegant to write. The weaknesses of
writing like this is of course that by default and without
<code>css</code>/<code>js</code> this HTML displays exactly the same as
everything else.</p>
<h2 id="the-style-side-of-things">The Style Side of Things</h2>
<p>If we wanted to add a yellow background color to all note boxes, we
would write the following <code>css</code>:</p>
<div class="sourceCode" id="cb5"><pre
class="sourceCode css"><code class="sourceCode css"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.note</span> {</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">background-color</span><span class="ch">:</span> <span class="cn">yellow</span><span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<!-- 
TODO: Make sure GH Link is valid 
-->
<div data-box="note">
<p>NOTE:</p>
<p>Realistically, that’s not all you would do to get a good looking box
but I want to keep the post simple. The actual <code>css</code> for this
site can be viewed at <a
href="https://github.com/BenRaz123/site/blob/main/styles.css">my
GitHub</a></p>
</div>
<p>Additionally, each note box has a little tag describing it
(e.g. “Note”, “Warning”, etc). In order to add this tag without
<code>js</code> we will write this code:</p>
<div class="sourceCode" id="cb6"><pre
class="sourceCode css"><code class="sourceCode css"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.note</span><span class="in">::before</span> {</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">content</span><span class="ch">:</span> <span class="st">&quot;Note&quot;</span><span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">margin-left</span><span class="ch">:</span> <span class="dv">-1</span><span class="dt">em</span><span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Since the first <code>&lt;p&gt;</code> element is now redundant, we
can remove it like this:</p>
<div class="sourceCode" id="cb7"><pre
class="sourceCode css"><code class="sourceCode css"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.note</span> <span class="op">&gt;</span> p<span class="in">:first-child</span> { <span class="kw">display</span><span class="ch">:</span> <span class="dv">none</span> }</span></code></pre></div>
<p>This is nice because boxes will be legible without <code>css</code>
but will look nice with <code>css</code> as well. And all of this
without a single line of JavaScript!.</p>
<h3 id="generalizing">Generalizing</h3>
<p>Now all of this is fine and dandy until we want to define additional
note boxes, like <code>Warning</code>, <code>Info</code>, and etc<a
href="#fn2" class="footnote-ref" id="fnref2"
role="doc-noteref"><sup>2</sup></a>. As you can see with the following
<code>css</code>, the naive approach can get annoying quickly:</p>
<div class="sourceCode" id="cb8"><pre
class="sourceCode css"><code class="sourceCode css"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="co"> * Notes</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="co"> */</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.note</span> {</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">background-color</span><span class="ch">:</span> <span class="cn">yellow</span><span class="op">;</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* ... */</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.note</span><span class="in">::before</span> {</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">content</span><span class="ch">:</span> <span class="st">&quot;Note&quot;</span><span class="op">;</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">margin-left</span><span class="ch">:</span> <span class="dv">-1</span><span class="dt">em</span><span class="op">;</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* ... */</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.note</span> <span class="op">&gt;</span> p<span class="in">:first-child</span> { <span class="kw">display</span><span class="ch">:</span> <span class="dv">none</span><span class="op">;</span> }</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a><span class="co"> * Warning</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a><span class="co"> */</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.warning</span> {</span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>    <span class="kw">background-color</span><span class="ch">:</span> <span class="cn">red</span><span class="op">;</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* ... */</span></span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.warning</span><span class="in">::before</span> {</span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>    <span class="kw">content</span><span class="ch">:</span> <span class="st">&quot;Warning&quot;</span><span class="op">;</span></span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>    <span class="kw">margin-left</span><span class="ch">:</span> <span class="dv">-1</span><span class="dt">em</span><span class="op">;</span></span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* ... */</span></span>
<span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.warning</span> <span class="op">&gt;</span> p<span class="in">:first-child</span> { <span class="kw">display</span><span class="ch">:</span> <span class="dv">none</span><span class="op">;</span> }</span>
<span id="cb8-34"><a href="#cb8-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-35"><a href="#cb8-35" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span>
<span id="cb8-36"><a href="#cb8-36" aria-hidden="true" tabindex="-1"></a><span class="co"> * Info</span></span>
<span id="cb8-37"><a href="#cb8-37" aria-hidden="true" tabindex="-1"></a><span class="co"> */</span></span>
<span id="cb8-38"><a href="#cb8-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-39"><a href="#cb8-39" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.info</span> {</span>
<span id="cb8-40"><a href="#cb8-40" aria-hidden="true" tabindex="-1"></a>    <span class="kw">background-color</span><span class="ch">:</span> <span class="cn">gray</span><span class="op">;</span></span>
<span id="cb8-41"><a href="#cb8-41" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* ... */</span></span>
<span id="cb8-42"><a href="#cb8-42" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb8-43"><a href="#cb8-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-44"><a href="#cb8-44" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.info</span><span class="in">::before</span> {</span>
<span id="cb8-45"><a href="#cb8-45" aria-hidden="true" tabindex="-1"></a>    <span class="kw">content</span><span class="ch">:</span> <span class="st">&quot;Info&quot;</span><span class="op">;</span></span>
<span id="cb8-46"><a href="#cb8-46" aria-hidden="true" tabindex="-1"></a>    <span class="kw">margin-left</span><span class="ch">:</span> <span class="dv">-1</span><span class="dt">em</span><span class="op">;</span></span>
<span id="cb8-47"><a href="#cb8-47" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* ... */</span></span>
<span id="cb8-48"><a href="#cb8-48" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb8-49"><a href="#cb8-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-50"><a href="#cb8-50" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.info</span> <span class="op">&gt;</span> p<span class="in">:first-child</span> { <span class="kw">display</span><span class="ch">:</span> <span class="dv">none</span><span class="op">;</span> }</span></code></pre></div>
<p>Even if we use CSS nesting, this code looks no prettier:</p>
<div class="sourceCode" id="cb9"><pre
class="sourceCode css"><code class="sourceCode css"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.note</span> {</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">background-color</span><span class="ch">:</span> <span class="cn">yellow</span><span class="op">;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* ... */</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span> <span class="in">::before</span> {</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">content</span><span class="ch">:</span> <span class="st">&quot;Note&quot;</span><span class="op">;</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>        <span class="kw">margin-left</span><span class="ch">:</span> <span class="dv">-1</span><span class="dt">em</span><span class="op">;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* ... */</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span> <span class="op">&gt;</span> p<span class="in">:first-child</span> {</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>        <span class="kw">display</span><span class="ch">:</span> <span class="dv">none</span><span class="op">;</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.warning</span> {</span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">background-color</span><span class="ch">:</span> <span class="cn">red</span><span class="op">;</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* ... */</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span> <span class="in">::before</span> {</span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>        <span class="kw">content</span><span class="ch">:</span> <span class="st">&quot;Warning&quot;</span><span class="op">;</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>        <span class="kw">margin-left</span><span class="ch">:</span> <span class="dv">-1</span><span class="dt">em</span><span class="op">;</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* ... */</span></span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span> <span class="op">&gt;</span> p<span class="in">:first-child</span> {</span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>        <span class="kw">display</span><span class="ch">:</span> <span class="dv">none</span><span class="op">;</span></span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.info</span>{</span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a>    <span class="kw">background-color</span><span class="ch">:</span> <span class="cn">gray</span><span class="op">;</span></span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* ... */</span></span>
<span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span> <span class="in">::before</span> {</span>
<span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a>        <span class="kw">content</span><span class="ch">:</span> <span class="st">&quot;Info&quot;</span><span class="op">;</span></span>
<span id="cb9-34"><a href="#cb9-34" aria-hidden="true" tabindex="-1"></a>        <span class="kw">margin-left</span><span class="ch">:</span> <span class="dv">-1</span><span class="dt">em</span><span class="op">;</span></span>
<span id="cb9-35"><a href="#cb9-35" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* ... */</span></span>
<span id="cb9-36"><a href="#cb9-36" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb9-37"><a href="#cb9-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-38"><a href="#cb9-38" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span> <span class="op">&gt;</span> p<span class="in">:first-child</span> {</span>
<span id="cb9-39"><a href="#cb9-39" aria-hidden="true" tabindex="-1"></a>        <span class="kw">display</span><span class="ch">:</span> <span class="dv">none</span><span class="op">;</span></span>
<span id="cb9-40"><a href="#cb9-40" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb9-41"><a href="#cb9-41" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Additionally, we should be able to accommodate much more boxes, like
<code>Hint</code>, <code>Disclaimer</code><a href="#fn3"
class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>,
and so on. And we should have a default box as any box that isn’t
covered in the CSS simply isn’t styled. The solution to this is to stop
repeating ourselves and to generalize. We can do this by using the
<code>[class]</code> selector and the <code>attr()</code> function to
abstract over class:</p>
<div class="sourceCode" id="cb10"><pre
class="sourceCode css"><code class="sourceCode css"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>div<span class="ex">[</span><span class="ss">class</span><span class="ex">]</span> {</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">background-color</span><span class="ch">:</span> <span class="cn">gray</span><span class="op">;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* ... */</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span> <span class="in">::before</span> {</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">content</span><span class="ch">:</span> <span class="fu">attr(</span><span class="dv">class</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>        <span class="kw">text-transform</span><span class="ch">:</span> <span class="dv">capitalize</span><span class="op">;</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">margin-left</span><span class="ch">:</span> <span class="dv">-1</span><span class="dt">em</span><span class="op">;</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* ... */</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span> <span class="op">&gt;</span> p<span class="in">:first-child</span> {</span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>        <span class="kw">display</span><span class="ch">:</span> <span class="dv">none</span><span class="op">;</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>This is the generic solution, which covers all possible classes. From
here we can define specific cases (this is because the
<code>div.&lt;class&gt;</code> selector is more specific than the
<code>div[class]</code> selector):</p>
<div class="sourceCode" id="cb11"><pre
class="sourceCode css"><code class="sourceCode css"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.note</span> {</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">background-color</span><span class="ch">:</span> <span class="cn">yellow</span><span class="op">;</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.warning</span> {</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">background-color</span><span class="ch">:</span> <span class="cn">red</span><span class="op">;</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>And so thus, our — one could say Object Oriented — CSS solution
manages to solve the problem of code duplication by creating a default
and implementation and “classes” that override this implementation.</p>
<h2 id="the-pandoc-side-of-things">The <code>Pandoc</code> Side of
Things</h2>
<p>Now, the avid readers will wonder where the <code>NOTE:</code> is
added in the build process. This is something done note with Python
(build script), JavaScript, or CSS. This is actually done via a
<code>pandoc</code> filter written using <code>lua</code> (filters are
invoked using <code>pandoc --lua-filter &lt;file&gt;</code>). The filter
takes a</p>
<div class="sourceCode" id="cb12"><pre
class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>::: <span class="dt">&lt;</span><span class="kw">text</span><span class="dt">&gt;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">content</span><span class="dt">&gt;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>:::</span></code></pre></div>
<p>and transforms it into</p>
<div class="sourceCode" id="cb13"><pre
class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>::: <span class="dt">&lt;</span><span class="kw">text</span><span class="dt">&gt;</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">TEXT</span><span class="dt">&gt;</span>:</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">content</span><span class="dt">&gt;</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>:::</span></code></pre></div>
<p>Here is the code for the filter:</p>
<div class="sourceCode" id="cb14"><pre
class="sourceCode lua"><code class="sourceCode lua"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> Div<span class="op">(</span><span class="va">el</span><span class="op">)</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">#</span><span class="va">el</span><span class="op">.</span><span class="va">classes</span> <span class="op">&gt;</span> <span class="dv">0</span> <span class="cf">then</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">local</span> <span class="va">some_word</span> <span class="op">=</span> <span class="va">el</span><span class="op">.</span><span class="va">classes</span><span class="op">[</span><span class="dv">1</span><span class="op">]</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">local</span> <span class="va">capitalized_word</span> <span class="op">=</span> <span class="fu">string.upper</span><span class="op">(</span><span class="va">some_word</span><span class="op">)</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">local</span> <span class="va">capitalized_intro</span> <span class="op">=</span> <span class="va">pandoc</span><span class="op">.</span>Para<span class="op">({</span><span class="va">pandoc</span><span class="op">.</span>Str<span class="op">(</span><span class="va">capitalized_word</span> <span class="op">..</span> <span class="st">&quot;:&quot;</span><span class="op">)})</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>        <span class="fu">table.insert</span><span class="op">(</span><span class="va">el</span><span class="op">.</span><span class="va">content</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="va">capitalized_intro</span><span class="op">)</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">end</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="va">el</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="kw">end</span></span></code></pre></div>
<p>This filter checks for a div element with a non-zero amount of
classes, and appends the class name to the content in uppercase.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Or, for the cynical, linguistic fragmentation<a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>I even defined a <code>Carrots/Sticks</code> box! (Used
<a href="/blog/trump_ukraine_nato.html#the-new-strategy">on this blog
post about geopolitics</a><a href="#fnref2" class="footnote-back"
role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>… and <code>Carrots/Sticks</code> of course ;)<a
href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</description><pubDate>Tue, 24 Dec 2024 09:35:00 +0000</pubdate></item> <item><title>The Process of Building This Website</title><link>https://benraz.dev/blog/website_process.html</link><description><div data-box="info">
<p>INFO:</p>
<p>The source for this website can be found on my Github at <a
href="https://github.com/benraz123/site">this link</a>. This site is
hosted at <a
href="https://github.com/benraz123/benraz123.github.io">this
link</a>.</p>
</div>
<p>Welcome again to my brand-new website! I hope it doesn’t look too
terrible. I wanted to, in an act of supreme originality, dedicate my
first blog post to documenting the process used to conjure up this
website, READMEs be damned.</p>
<h2 id="the-original-idea">The Original Idea</h2>
<p>My primary goal with this project was to build a low-effort
text-oriented website. In order to make the hosting simple (I am using
Github Pages here), a static output directory was needed. Additionally,
creating an RSS feed was another goal, as while clearly the vast
majority of people disagree with me, RSS feeds provide a superior
user-experience. Why go to one website after another when you can see
them all in one uniform, customisable reader that can be used offline
and/or the terminal (yes, I know command-line browsers exist, but they
are unusable for pretty much every single modern website). Now, I could
have all of this by just writing HTML by hand, but where’s the fun in
that? I’m a developer after all, which means I am dangerously addicted
to Markdown (and sometimes orgmode). So my website’s content should be
written in markdown and converted to html.</p>
<h2 id="how-to-do-it">How to do it</h2>
<p>We are in luck, as it turns out. Not only was Markdown written
<em>for the purpose of</em> being converted to HTML, many converters
from Markdown to HTML exist. The best of them in my experience is <a
href="https://pandoc.org"><code>pandoc</code></a>. <code>pandoc</code>
allows not just for converting markdown to html but also using
templates. This is where the fun begins.</p>
<h3 id="a-basic-pandoc-template">A Basic <code>Pandoc</code>
Template</h3>
<p>A basic <code>pandoc</code> template would look like this:</p>
<div class="sourceCode" id="cb1"><pre
class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">title</span><span class="dt">&gt;</span>$title$<span class="dt">&lt;/</span><span class="kw">title</span><span class="dt">&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">body</span><span class="dt">&gt;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    Author: $author$</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">hr</span><span class="dt">&gt;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    $content$</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">body</span><span class="dt">&gt;</span></span></code></pre></div>
<p>If we write the following markdown:</p>
<div class="sourceCode" id="cb2"><pre
class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">---</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="an">title:</span><span class="co"> Hello World</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="an">author:</span><span class="co"> Albert Einstein</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">---</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>This is a very simple thing.</span></code></pre></div>
<p>We could build it with the following command:</p>
<pre><code>pandoc in.md -o out.html --template template.html</code></pre>
<p>This would produce the following document:</p>
<div class="sourceCode" id="cb4"><pre
class="sourceCode html"><code class="sourceCode html"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">title</span><span class="dt">&gt;</span>Hello World<span class="dt">&lt;/</span><span class="kw">title</span><span class="dt">&gt;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">body</span><span class="dt">&gt;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">p</span><span class="dt">&gt;</span>Author: Albert Einstein<span class="dt">&lt;/</span><span class="kw">p</span><span class="dt">&gt;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">hr</span><span class="dt">&gt;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">p</span><span class="dt">&gt;</span>This is a very simple thing<span class="dt">&lt;/</span><span class="kw">p</span><span class="dt">&gt;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">body</span><span class="dt">&gt;</span></span></code></pre></div>
<p>This allows for us to use a sort of component system. For example,
instead of writing the same navigation bar for two different templates,
I can just parameterize the navigation bar. In my template file, I write
this:</p>
<div class="sourceCode" id="cb5"><pre
class="sourceCode html"><code class="sourceCode html"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>...</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>$navbar$</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>...</span></code></pre></div>
<p>And I compile with the <code>-V navbar="$(cat navbar.html)"</code>
flag. Just like that, we have a working component system (sort of).
Putting all of this together, we have a working static site generator. I
recommend the following directory structure as well:</p>
<pre><code>/ (project root)
- blog/
- templates/
- components/
- out/
  - blog/</code></pre>
<h2 id="the-build-stage">The Build Stage</h2>
<p>Now in order to put this all together, I whipped up a quick python
script to build the site automatically, because running
<code>pandoc</code> by hand get’s annoying, difficult, and error-prone
if one has dozens of posts. I debated if I should have used
<code>bash</code>, <code>make</code>, or even <code>fish</code>, but
<code>python</code> ultimately won out as it is the simplest for me and
allows for the most “programming”, useful because I do end up (sort of)
serializing the blog posts.</p>
<p>The heart of the script is the function <code>build_page()</code>.
This function basically just wraps around a <code>pandoc</code> command
to build a page with a template and add components. Here it is:</p>
<div class="sourceCode" id="cb7"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> build_page(input_page: <span class="bu">str</span>, output_page: <span class="bu">str</span>, template: <span class="bu">str</span>, args: <span class="bu">dict</span>[<span class="bu">str</span>, <span class="bu">str</span>]):</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&quot;[INFO] Transforming Page &#39;</span><span class="sc">{</span>input_page<span class="sc">}</span><span class="ss">&#39; into Page &#39;</span><span class="sc">{</span>output_page<span class="sc">}</span><span class="ss">&#39; with Template &#39;</span><span class="sc">{</span>template<span class="sc">}</span><span class="ss">&#39;&quot;</span>)</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    command <span class="op">=</span> <span class="ss">f&quot;pandoc &#39;</span><span class="sc">{</span>input_page<span class="sc">}</span><span class="ss">&#39; -o &#39;</span><span class="sc">{</span>output_page<span class="sc">}</span><span class="ss">&#39; --template &#39;</span><span class="sc">{</span>template<span class="sc">}</span><span class="ss">&#39; &quot;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> (arg, val) <span class="kw">in</span> args.items():</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        command <span class="op">+=</span> <span class="ss">f&quot;-V </span><span class="sc">{</span>arg<span class="sc">}</span><span class="ss">=</span><span class="ch">\&quot;</span><span class="ss">$(cat </span><span class="sc">{</span>val<span class="sc">}</span><span class="ss">)</span><span class="ch">\&quot;</span><span class="ss"> &quot;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    os.system(command)</span></code></pre></div>
<p>With this handy function, generating the about and index pages
becomes very easy. All we have to do is run the
<code>build_page()</code> function like this:</p>
<div class="sourceCode" id="cb8"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Generate Index Page</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>build_page(<span class="st">&quot;index.md&quot;</span>, <span class="st">&quot;out/index.html&quot;</span>, <span class="st">&quot;templates/page.html&quot;</span>, DEFAULT_ARGS)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="co"># Generate About Page</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>build_page(<span class="st">&quot;about.md&quot;</span>, <span class="st">&quot;out/about.html&quot;</span>, <span class="st">&quot;templates/page.html&quot;</span>, DEFAULT_ARGS)</span></code></pre></div>
<p>The next thing to do is to build the blog posts and the blog index.
For this I decided for some reason to abstract over a blog post with a
class. However, in my defense, it was a <code>dataclass</code>.</p>
<div class="sourceCode" id="cb9"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="at">@dataclass</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> BlogPost():</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    published_date: datetime</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    updated_date: datetime</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    title: <span class="bu">str</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    contents: <span class="bu">str</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    location: <span class="bu">list</span>[<span class="bu">str</span>] </span></code></pre></div>
<p>Why so many properties? The main reason was I wanted to be able to
sort, list, and make into an RSS feed the blog posts. I additionally
wrote the boilerplate necessary for sorting a
<code>list[BlogPost]</code> (<code>__eq__()</code>,
<code>__ne__()</code>, <code>__gt__()</code>, <code>__lt__()</code>,
<code>__ge__()</code>, and <code>__le__()</code>).</p>
<p>I wrote a function next for getting all blog posts and building all
of them. After a little <code>CSS</code>, it’s all done.</p>
<h2 id="putting-it-all-together">Putting it all Together</h2>
<div data-box="warning">
<p>WARNING:</p>
<p>While effort was made to make the script generic, it still contains a
lot of hardcoded values. Additionally, it is not well-written or tested
so do not expect for it to work. If you don’t want to get down and dirty
in the details, don’t use it. There are plenty of SSGs around and I
don’t want to rob you of the fun of writing your own.</p>
</div>
<p>To summarize, I basically created a crappy SSG with
<code>python</code> and <code>pandoc</code>. If anyone for any reason
wants to see it, the site is contained in two repositories, <a
href="https://github.com/benraz123/site">this one</a> for the source and
<a href="https://github.com/benraz123/benraz123.github.io">this one</a>
for the build.</p>
</description><pubDate>Wed, 30 Oct 2024 17:00:00 +0000</pubdate></item></channel></rss>